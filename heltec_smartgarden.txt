#include <WiFi.h>
#include <FirebaseESP32.h>
#include <SPI.h>
#include <LoRa.h>


#define FIREBASE_HOST "xxxxxxxxxxxxxxxxxxxxxxxxxxx" //Do not include https:// in FIREBASE_HOST
#define FIREBASE_AUTH "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
#define WIFI_SSID "xxxxxxxxxxxxxx"
#define WIFI_PASSWORD "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

String recdPacket;
bool recdData;
//Define FirebaseESP32 data object
FirebaseData firebaseData;
int soilmoisture;
int pumpstatus;
int commaPos;


void setup()
{

  Serial.begin(115200);

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");
    while (WiFi.status() != WL_CONNECTED)
  {
    Serial.print(".");
    delay(300);
  }
  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());
  Serial.println();

  Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);
  Firebase.reconnectWiFi(true);

  //Set database read timeout to 1 minute (max 15 minutes)
  Firebase.setReadTimeout(firebaseData, 1000 * 60);
  //tiny, small, medium, large and unlimited.
  //Size and its write timeout e.g. tiny (1s), small (10s), medium (30s) and large (60s).
  Firebase.setwriteSizeLimit(firebaseData, "tiny");
    



  Serial.println("LoRa Receiver Callback");

 SPI.begin(5,19,27,18);
  LoRa.setPins(18,14,26);

  if (!LoRa.begin(433E6)) {
    Serial.println("Starting LoRa failed!");
    while (1);
  }

  // register the receive callback
  LoRa.onReceive(onReceive);

  // put the radio into receive mode
  LoRa.receive();

} 
  

void loop()
{
 
  if(recdData)
  {
    commaPos=recdPacket.indexOf(',');
    String temp = recdPacket.substring(0,commaPos);
    soilmoisture=temp.toInt();
    String temp1=recdPacket.substring(commaPos+1);
    pumpstatus=temp1.toInt();
    
    Serial.println(soilmoisture);
    Serial.println(pumpstatus);
    Firebase.setFloat(firebaseData,  "/smartgarden/soilmoisture",soilmoisture);
    Firebase.setFloat(firebaseData,  "/smartgarden/pumpstatus",pumpstatus);
    recdData=false;
  }


delay(2000);  
}

void onReceive(int packetSize) {
  // received a packet
  Serial.print("Received packet '");
  recdPacket="";

  // read packet
  for (int i = 0; i < packetSize; i++) {
    char c = LoRa.read();
    Serial.print(c);
    recdPacket=recdPacket+c;
     }

  recdData=true;
  // print RSSI of packet
  //Serial.print("' with RSSI ");
  //Serial.println(LoRa.packetRssi());
}